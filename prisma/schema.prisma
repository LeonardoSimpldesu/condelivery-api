generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id           Int    @id @default(autoincrement())
  // como é logradouro no inglês e que porra é um logradouro que até hoje eu não sei 
  city         String
  country      String
  neighborhood String
  number       Int // E se tiver letras? 
  state        String
  street       String
  zipCode      String

  // relationship 
  // one to one 
  condominium   Condominium?
  condominiumId Int?

  @@map("address")
}

model Apartment {
  id     Int    @id @default(autoincrement())
  number String

  // Relationships 

  // One To Many 
  residents Resident[]

  blockId Int
  block   Block @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@map("apartments")
}

model Block {
  id   Int    @id @default(autoincrement())
  name String

  // Relationships 

  // One To Many 
  condominiumId Int
  condominium   Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)

  apartments Apartment[]

  @@map("blocks")
}

model Collaborator {
  id                    Int     @id @default(autoincrement())
  name                  String
  countDeliveries       Int
  // Esse cara aqui tem que ser calculado ou não? Vantagens e desvantagens. 
  mediaRating           Float?
  countRating           Int
  operatingTimeInMonths Int
  tags                  String
  languages             String
  local                 String
  servicesProvided      String
  active                Boolean

  // Relationships 

  // One To One 
  order Order[]

  // One To May 
  ratings Rating[]

  @@map("collaborators")
}

model Condominium {
  id   Int    @id @default(autoincrement())
  name String

  // Relationships 
  // one to one 
  addressId Int     @unique
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  // One To Many 
  blocks   Block[]
  policies Policy[]

  @@map("condominiuns")
}

enum Status { 
  EmRota
  Finalizado
  Avaliado
}

model Order {
  id          Int      @id @default(autoincrement())
  code        String
  created_at  DateTime // is it string? 
  updated_at  DateTime
  description String
  status     Status 
  isEvaluated Boolean
  // Relationships 

  // One To One 
  collaboratorId Int
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade) // create relationship for it 

  rating Rating?

  // One To One
  residentId Int
  resident   Resident @relation(fields: [residentId], references: [id], onDelete: Cascade) // create relationship for it

  @@map("orders")
}

model Policy {
  id          Int    @id @default(autoincrement())
  title       String
  description String

  // Relationships 
  // One To Many 
  condominiumId Int
  condominium   Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)

  @@map("policies")
}

model Rating {
  id              Int     @id @default(autoincrement())
  ratingNote      Int
  recommendations String?

  // Relationships 

  // One To One 
  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // One To Many 
  collaboratorId Int
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model Resident {
  id         Int    @id @default(autoincrement())
  email      String @unique
  cell       String
  cpf        String
  last_name  String
  name       String
  password   String
  photo_path String

  // Relationships 

  // One To One
  order Order[]

  // One To Many 
  apartmentId Int
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  @@map("residents")
}
